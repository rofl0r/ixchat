#!/bin/sh

prefix=/usr/local

libs=`cat << EOF
glib-2.0
gmodule-2.0
gtk+-2.0
gtk+-x11-2.0
EOF
`
clear_config() {
	rm -f config.mak 2>/dev/null
}

add_config() {
	printf "%s\n" "$1" >> config.mak
}

add_cflags() {
	add_config "CFLAGS += $1"
}

add_ldflags() {
	add_config "LDFLAGS += $1"
}

get_pkgconf_cflags() {
	pkg-config --cflags "$1" 2>/dev/null
}

get_pkgconf_ldflags() {
	pkg-config --libs "$1" 2>/dev/null
}

add_pkgconf_cflags() {
	fallback="$2"
	flags=$(get_pkgconf_cflags "$1")
	[ -z "$flags" ] && flags="$fallback"
	add_cflags "$flags"
}

add_pkgconf_ldflags() {
	fallback="$2"
	flags=$(get_pkgconf_ldflags "$1")
	[ -z "$flags" ] && flags="$fallback"
	add_ldflags "$flags"
}

add_lib() {
	add_pkgconf_cflags "$1" "$2"
	add_pkgconf_ldflags "$1" "$3"
}

check_program() {
	program="$1"
	needed="$2"
	result=$(which "$program" 2>/dev/null)
	if [ "$needed" = "1" ] && [ -z "$result" ] ; then
		echo "error: needed program $program not found" >&2
		kill -9 $$
	fi
	printf "%s\n" "$program"
}

pdisable() {
	local a="$1"
	printf "--enable-%s[=yes/no/auto]\tenable %s %s [default: auto]\n" "$a" "$a" "$2"
}

usage() {
	echo "supported arguments"
	echo "--help			show this text"
	echo "--prefix=/path 		default: $prefix"
	echo "--exec_prefix=/path	default: $prefix/bin"
	echo "--bindir=/path		default: $prefix/bin"
	echo "--libdir=/path		default: $prefix/lib"
	echo "--includedir=/path	default: $prefix/include"
	echo "--sysconfdir=/path	default: $prefix/etc"
	echo
	for i in libsexy gtkspell ; do pdisable $i "library usage" ; done
	echo
	for i in python tcl perl ; do pdisable $i plugin ; done
	echo
	echo "NOTE: the auto detection of the scripting language plugins"
	echo "works only for non-crosscompile scenarios because the authors of those languages"
	echo "stubbornly require you to execute the interpreter in a specific way to query"
	echo "the necessary flags rather than relying on standardtools like pkgconfig."
	echo "because of that, if set to yes, the required C/LDFLAGS for the plugins need to be passed"
	echo "manually to configure using PERL_CFLAGS=... PY_LDFLAGS=... TCL_CFLAGS=... /configure ..."
	echo
	exit 1
}

ismac() {
	uname -s | grep Darwin >/dev/null
}

isbsd() {
	uname -s | grep BSD >/dev/null
}

spliteq() {
	arg=$1
	echo "${arg#*=}"
	#alternatives echo "$arg" | cut -d= -f2-
	# or echo "$arg" | sed 's/[^=]*=//'
}

check_feature() {
	local f="$1"
	local res=
	case "$2" in
	--enable-$f) res=yes;;
	--disable-$f) res=no;;
	--enable-$f=*) res=`spliteq $2`;;
	esac
	[ -n "$res" ] && eval $3=$res
}

parsearg() {
	for i in python perl tcl libsexy gtkspell ; do check_feature $i "$1" feature_$i ; done
	case "$1" in
	--prefix=*) prefix=`spliteq $1`;;
	--exec_prefix=*) exec_prefix=`spliteq $1`;;
	--bindir=*) bindir=`spliteq $1`;;
	--libdir=*) libdir=`spliteq $1`;;
	--includedir=*) includedir=`spliteq $1`;;
	--sysconfdir=*) sysconfdir=`spliteq $1`;;
	--help) usage;;
	esac
}

fail() { printf "%s\n" "$1" >&2 ; exit 1 ; }

# Get a temporary filename
i=0
set -C
while : ; do i=$(($i+1))
tmpc="./conf$$-$PPID-$i.c"
2>|/dev/null > "$tmpc" && break
test "$i" -gt 50 && fail "$0: cannot create temporary file $tmpc"
done
set +C
trap 'rm "$tmpc"' EXIT INT QUIT TERM HUP

check_compile() {
	printf "checking %s ... " "$1"
	printf "$3" > "$tmpc"
	local res=0
	$CC $OUR_CPPFLAGS $CPPFLAGS $2 $CFLAGS "$tmpc" $OUR_LDFLAGS -o /dev/null >/dev/null 2>&1 \
	|| res=1
	test x$res = x0 && \
	{ printf "yes\n" ; test x"$2" = x || OUR_CPPFLAGS="$OUR_CPPFLAGS $2" ; } \
	|| printf "no\n"
	return $res
}

check_define() {
	printf "checking whether \$CC defines %s ... " "$1"
	local res=1
	$CC $OUR_CPPFLAGS $CPPFLAGS $CFLAGS -dM -E - </dev/null | grep "$1" >/dev/null && res=0
	test x$res = x0 && printf "yes\n" || printf "no\n"
	return $res
}

check_compile_run() {
	printf "checking %s ... " "$1"
	printf "$2" > "$tmpc"
	local res=0
	$CC $OUR_CPPFLAGS $CPPFLAGS $CFLAGS "$tmpc" -o "$tmpc".out >/dev/null 2>&1 \
	|| res=1
	test x$res = x0 && { "$tmpc".out || res=1 ; }
	rm -f "$tmpc".out
	test x$res = x0 && printf "yes\n" || printf "no\n"
	return $res
}

check_link_silent() {
	printf "$2" > "$tmpc"
	$CC $OUR_CPPFLAGS $CPPFLAGS $1 $CFLAGS "$tmpc" -o /dev/null >/dev/null 2>&1
}

check_link() {
	printf "checking %s ... " "$1"
	local res=0
	check_link_silent "$2" "$3" || res=1
	test x$res = x0 && printf "yes\n" || printf "no\n"
	return $res
}

test -z "$CC" && CC=cc

check_compile 'whether C compiler works' '' 'int main() {return 0;}' || fail 'error: install a C compiler and library'
check_compile 'whether we have memrchr()' "-DGNU_SOURCE -DHAVE_MEMRCHR" \
'#define _GNU_SOURCE\n#include <string.h>\nint main() {\nvoid *p = memrchr("foo", 0, 3);\nreturn 0;}'

check_link 'whether we have ssl lib and headers' '-lssl -lcrypto' \
  "#include <openssl/ssl.h>\nint main() { return 0; }" || \
  fail 'ssl library not found'
OUR_LDFLAGS='-lssl -lcrypto'

check_compile 'whether we have SSL_CTX_get_ssl_method()' \
  '-DHAVE_SSL_CTX_get_ssl_method' \
  "#include <openssl/ssl.h>\nint main() { SSL_CTX *c = 0; (void)SSL_CTX_get_ssl_method(c); return 0;}"

check_compile 'whether we have DH_set0_pqg()' \
  '-DHAVE_DH_set0_pqg' \
  "#include <openssl/ssl.h>\nint main() { DH *c = 0; (void)DH_set0_pqg(c,0,0,0); return 0;}"

check_compile 'whether we have DH_get0_pub_key()' \
  '-DHAVE_DH_get0_pub_key' \
  "#include <openssl/ssl.h>\nint main() { DH *c = 0; (void)DH_get0_pub_key(c); return 0;}"

for i in  python perl tcl libsexy gtkspell ; do eval feature_$i=auto ; done
while true ; do
	case $1 in
	-*) parsearg "$1"; shift;;
	*) break ;;
	esac
done

[ -z "$exec_prefix" ] && exec_prefix=$prefix
[ -z "$libdir" ] && libdir=$prefix/lib
[ -z "$includedir" ] && includedir=$prefix/include
[ -z "$sysconfdir" ] && sysconfdir=$prefix/etc
[ -z "$bindir" ] && bindir=$exec_prefix/bin
[ -z "$CC" ] && CC=cc

clear_config

add_config "prefix = $prefix"
add_config "exec_prefix = $exec_prefix"
add_config "bindir = $bindir"
add_config "libdir = $libdir"
add_config "includedir = $includedir"
add_config "sysconfdir = $sysconfdir"

add_config "CC ?= $CC"

[ -z "$CPPFLAGS" ] || add_config "USER_CPPFLAGS = $CPPFLAGS"
[ -z "$OUR_CPPFLAGS" ] || add_config "USER_CPPFLAGS += $OUR_CPPFLAGS"
[ -z "$CFLAGS" ] ||   add_config "USER_CFLAGS = $CFLAGS"
[ -z "$LDFLAGS" ] ||   add_config "USER_LDFLAGS = $LDFLAGS"

add_cflags "-DXCHATLIBDIR=\\\"$libdir/xchat\\\""
add_cflags "-DXCHATSHAREDIR=\\\"$prefix/share/xchat\\\""
add_cflags "-DUSE_OPENSSL"

for lib in $libs ; do add_lib "$lib" ; done
add_lib openssl "" "-lssl -lcrypto"

check_link 'whether we have libdl' '-ldl' \
  "int main() { return 0; }" && add_ldflags '-ldl'

prog1=$(check_program "gdk-pixbuf-csource" 1)
add_config "PIXMAPCONVERT = $prog1"

for i in libsexy gtkspell ; do
	eval enabled=\${feature_$i}
	printf "checking whether to use library $i..."
	if [ "$enabled" = yes ] || [ "$enabled" = auto ] ; then
		l=$i
		[ $l = gtkspell ] && l=gtkspell-2.0
		spell_flags=$(get_pkgconf_cflags $l)
		if [ ! -z "$spell_flags" ] ; then
			add_cflags "$spell_flags"
			spell_flags=$(get_pkgconf_ldflags $i)
			add_ldflags "$spell_flags"
			if [ "$i" = "libsexy" ] ; then
				add_cflags "-DUSE_LIBSEXY"
			else
				add_cflags "-DUSE_GTKSPELL"
			fi
			printf "yes\n"
		else
			if [ "$enabled" = yes ] ; then
				printf "error: $i requested but not found!"
				exit 1
			fi
			printf "no\n"
		fi
	fi
done

# plugin stuff ...

use_plugin=

printf "checking whether to use perl plugin..."
if [ "$feature_perl" = auto ] ; then
	perl=$(check_program "perl" 0)
	if [ -n "$perl" ] ; then
		PERL_CFLAGS=`$perl -MExtUtils::Embed -e ccopts 2>/dev/null`
		PERL_LDFLAGS=`$perl -MExtUtils::Embed -e ldopts 2>/dev/null | sed 's/-lgdbm //'`
		feature_perl=yes
	fi
fi
if [ "$feature_perl" = yes ] ; then
	printf "yes\n"
	add_config "PERL_CFLAGS = $PERL_CFLAGS"
	add_config "PERL_LDFLAGS = $PERL_LDFLAGS"
	add_config "PLUGINS += perl.so"
	# there are actually 2 plugins, "old" and new, but all scripts i've seen only use old
	add_cflags "-DOLD_PERL"
	use_plugin=1
else
	printf "no\n"
fi
printf "checking whether to use tcl plugin..."
if [ "$feature_tcl" = auto ] ; then
	tcl=$(check_program "tclsh" 0)
	if [ -n "$tcl" ] ; then
		TCL_CFLAGS=$(get_pkgconf_cflags tcl)
		TCL_LDFLAGS=$(get_pkgconf_ldflags tcl)
		tcl_error=
		# tcl 8.5 does not come with a pkgconfig file
		# tcl 8.6. comes with a buggy one that fails to include its own library
		# https://sourceforge.net/tracker/?func=detail&aid=3598298&group_id=10894&atid=110894
		# hopefully tcl 8.7 will come with a *working* pkgconfig file ...
		# until that happens, we need to fall back to its proprietary tclConfig system.
		if [ -z "$TCL_LDFLAGS" ] || ! echo "$TCL_LDFLAGS" | grep "[-]ltcl" > /dev/null ; then
			tcl_found=
			for i in "$libdir" "$prefix"/lib/ "$prefix"/lib64/ /lib /lib64 /usr/lib /usr/lib64 ; do
				printf "searching tclConfig.sh in $i ... "
				if [ -e "$i"/tclConfig.sh ] ; then
					. "$i"/tclConfig.sh
					TCL_LDFLAGS="$TCL_LIB_SPEC $TCL_LIBS"
					tcl_found=1
					break
				fi
			done
			if [ -z "$tcl_found" ] ; then
				tcl_error=1
			fi
		fi
		[ -z "$tcl_error" ] && feature_tcl=yes
	fi
fi
if [ "$feature_tcl" = yes ] ; then
	printf "yes\n"
	add_config "TCL_CFLAGS = $TCL_CFLAGS"
	add_config "TCL_LDFLAGS = $TCL_LDFLAGS"
	add_config "PLUGINS += tcl.so"
	use_plugin=1
else
	printf "no\n"
fi
printf "checking whether to use python plugin..."
if [ "$feature_python" = auto ] ; then
	python=$(check_program "python" 0)
	if [ -n "$python" ] ; then
		PY_CFLAGS=$(get_pkgconf_cflags python)
		[ -z "$PY_CFLAGS" ] && PY_CFLAGS=$(get_pkgconf_cflags python-2.7)
		if  [ -z "$PY_CFLAGS" ] ; then
			for i in "$prefix" /usr /usr/local/ ; do
				printf "searching Python.h in $i/include/python2.7 ... "
                        	if [ -e "$i"/include/python2.7/Python.h ] ; then
					PY_CFLAGS=-I"$i"/include/python2.7
					printf "SUCCESS\n"
					break;
				else
					printf "FAIL\n"
				fi
			done
		fi
		PY_LDFLAGS=$(get_pkgconf_ldflags python)
		[ -z "$PY_LDFLAGS" ] && PY_LDFLAGS=$(get_pkgconf_ldflags python-2.7)
		[ -z "$PY_LDFLAGS" ] && PY_LDFLAGS=-lpython2.7
		[ ! -z "$PY_CFLAGS" ] && feature_python=yes
	fi
fi
if [ "$feature_python" = yes ] ; then
	printf "yes\n"
	printf "WARNING: python plugin needs environment variable PYTHONHOME\n"
	printf "  set to python's prefix.\n"
	printf "  lack of that environment variable will cause ixchat exitting\n"
	printf "  when the plugin is loaded.\n"
	printf "  on sabotage linux, use \"PYTHONHOME=/ ixchat\"\n"
	printf "  to launch the program.\n"
	add_config "PY_CFLAGS = $PY_CFLAGS"
	add_config "PY_LDFLAGS = $PY_LDFLAGS"
	add_config "PLUGINS += python.so"
	use_plugin=1
else
	printf "no\n"
fi

if [ "$use_plugin" = 1 ] ; then 
	add_cflags "-DUSE_PLUGIN"
fi

if isbsd || ismac ; then
	add_config "INSTALL_FLAGS=-m"
fi

add_cflags "\$(USER_CPPFLAGS) \$(USER_CFLAGS)"
add_ldflags "\$(USER_LDFLAGS)"
echo done, now run make \&\& make install

